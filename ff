#!/bin/bash
#
# NAME
#	ff - for each file
#
# SYNOPSIS
#	ff [-reh] file1 file2 ... [ < script ]
#
# OPTIONS
#	-r	Recursively handle subdirectories. Directories are handled
#		first before other non-directories.
#
#	-e	Use a custom ${EDITOR} for entering scripting commands.
#		This option _may_ disable the ability to pipe or redirect data 
#		to this tool; check with your text editor.
#
#	-h	Display this help message.
#
# ARGUMENTS
#	file	Path to a file (non-directory) or directory.
#
#	script	Path to an existing script file.
#
# DESCRIPTION
#	Allows the user to write an embedded BASH script which will be executed
#	once for each of the specified files. This tool is ideal for performing 
#	a procedure upon a group of files or directories, such as mass re-naming
#	of files.
#
#	The procedure given by the user is interpreted directly by the BASH
#	shell. So you can think of this tool as a way to iteratively execute a 
#	BASH script upon a large number of files or directories.
#
#	If you wish to input your custom script using a text editor, set a 
#	global shell variable ${EDITOR} to the path of your favorite text 
#	editor. For example: `export EDITOR='path to editor'`.
#
#	If you wish to invoke an existing script, you can do so via piping or 
#	redirection. For example, to run a script named 'my_script' upon a 
#	directory 'dir', you would run the following.
#
#		Method 1: 	ff -r dir < my_script
#		Method 2:	cat my_script | ff -r dir
#
#	Notice that the '-e' option is not present. Omitting '-e' may allow you
#	to pipe or redirect input to this tool; however this behavior is
#	dependent on your text editor.
#
# SCRIPT VARIABLES
#	The following variables are available for use in users' scripts.
#	Note that the UNIX term 'file' refers to both files and directories.
#
#	$f	basename of current file (or directory)
#	$d	relative path to current working directory
#
# AUTHORS
# 	Suraj Kurapati <skurapat@ucsc.edu>
#
# LICENSE
#	This program is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; either version 2 of the License, or   
#	(at your option) any later version.
#
####

# globals
	g_tmpfileMask="/tmp/$$"
	g_tmpfile_UsrInput="${g_tmpfileMask}.UsrInput"
	g_tmpfile_Subdirs="${g_tmpfileMask}.Subdirs"
	
	# option flags
	g_options="reh"
	g_opt_recurse=r
	g_opt_editor=e
	
	# option enabled flags. enabled = 1, disabled = 0
	g_optEn_recurse=0
	g_optEn_editor=0
	
# scan options

	while getopts "$g_options" opt
	do
		case "$opt" in
			$g_opt_recurse)
				g_optEn_recurse=1
			;;
			$g_opt_editor)
				g_optEn_editor=1
			;;
			*)
				# display help message, which happens to be the documentation header for this file
				cat $0 | sed -e '/^####/q' -e 's/^# *//' | more
				exit 0
			;;
		esac
	done
	
	
# allow user to input scripting commands
	
	if [ $g_optEn_editor -eq 1 ] && [ "$EDITOR" != "" ] ; then
		$EDITOR $g_tmpfile_UsrInput
	else
		cat > $g_tmpfile_UsrInput
	fi
	
# check user script
	if [ -z $g_tmpfile_UsrInput ] ; then
		g_input=break
	else
		g_input=$( cat $g_tmpfile_UsrInput )
	fi

# check recursive option

	if [ $g_optEn_recurse -eq 1 ]
	then
	# iterative version of recursive subdir handling script

		# loop through positional params
		for param
		do
			if [ -d "$param" ] 
			then
				# assemble list of all subdirectories to be traversed, with the deepest sub-directories appearing first
				ls -R "$param" | sed -n 's/:$//p' | sort -r > "$g_tmpfile_Subdirs"
				
				# determine file size
				n=$( wc -l "$g_tmpfile_Subdirs" | awk '{ print $1 }' )
				let "i = 1"
				
				# handle each subdir
				while [ $i -le $n ]
				do
					# read subdir from file
					d=$( sed -n "$i p" "$g_tmpfile_Subdirs" )
					
					# step into subdir
					pushd "$d" >& /dev/null
					
						# for all files in subdir
						for f in *
						do
							# execute user specified commands
							eval "$g_input"
						done
					
					# step out of subdir
					popd >& /dev/null
					
					# increment line number
					let "i = i + 1"
				done
			fi
		done
	
	else
	# just operate on given files, don't handle subdirs
	
		# set path of current directory
		d="$PWD"
		
		# loop through positional params
		for f
		do
			# execute user specified commands
			eval "$g_input"
		done
	fi
	
# cleanup
	rm -f ${g_tmpfileMask}*

