#!/bin/bash
#
# "For each File" installation script
#
###
#
# Copyright 2003, 2004 Suraj N. Kurapati.
#
###
#
# This file is part of "For each File".
# 
# "For each File" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# "For each File" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with "For each File"; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
###

## globals

	# package directory
	package_dir=${0%/*}

	# default installation directory
	install_dir_default=$HOME/ff-$( $package_dir/ff -v )
	symlink_dir_default=$HOME/bin
	
	# executable files
	files_exec=( ff fl )

## libraries

	source $package_dir/libs/gettext.lib
	__lib_gettext_load $package_dir/i18n/install.${LANG:0:2}.po

## functions

	# creates a new directory if it doesn't exist
	install_mkdir()
	{
		local rv=1
		
		if [ ! -e "$1" ]
		then
			mkdir -p "$1" && rv=0
		else
			[[ -d "$1" && -w "$1" ]] && rv=0
		fi
		
		# print error message
		[ $rv -gt 0 ] && gettext "Error: Unable to create directory %s." "\"$1\""
		
		return $rv
	}
	
	# repeatedly query the user until a proper directory name is given
	# @param	1	prompt
	# @param	2	name of var in which to store user given directory
	# @param	3	default directory value
	install_mkdir_query()
	{
		local isLoop=1
		
		while [ $isLoop -eq 1 ]
		do
			read -ep "$1"
		
			# set default value
			[ -z "$REPLY" ] && REPLY=$3
	
			# replace ~ with home path
			[ "${REPLY:0:1}" == "~" ] && REPLY="${HOME}${REPLY#\~}"
			
			# store input values
			eval "$2=\$REPLY"
			
			# create directory if doesn't exist
			install_mkdir "$REPLY" && isLoop=0
		done
	}
	

## installation

	gettext "Instructions"
	echo "- $( gettext "Press %s to cancel the installation at any time." "<CONTROL-C>" )"
	echo "- $( gettext "Press %s to accept the value in square brackets." "<ENTER>" )"
	echo

	# ask user for installation directory
		install_mkdir_query "$( gettext "Where shall I install this package? %s " "[$install_dir_default]" )" install_dir "$install_dir_default"
		
	# ask user for symlink directory
	
		install_mkdir_query "$( gettext "Where shall I install symbolic links? %s " "[$symlink_dir_default]" )" symlink_dir "$symlink_dir_default"
	
	# perform installation
	
		# echo install_dir=$install_dir
		# echo package_dir=$package_dir
		# echo symlink_dir=$symlink_dir
		
		# copy files
		gettext "Copying package files from %s to %s." "\"$package_dir\"" "\"$install_dir\""
		
		if cp -r "$package_dir" "$install_dir"
		then
			# create links
			for exec_file in "${files_exec[@]}"
			do
				symlink_src="$install_dir/$exec_file"
				symlink_dst="$symlink_dir/$exec_file"
				
				# make file executable
				chmod +x "$symlink_src"
				
				# remove existing symlink
				rm -f "$symlink_dst"
				
				# create new symlink
				gettext "Creating symbolic link from source %s to destination %s." "\"$symlink_src\"" "\"$symlink_dst\""
				ln -s "$symlink_src" "$symlink_dst"
			done
		fi
		
	# finished
	gettext "Installation complete."

