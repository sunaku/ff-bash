#!/bin/bash
#
# NAME
#	fl - for each line
#	<http://freshmeat.net/projects/ff/>
#
# SYNOPSIS
#	fl [-eh] file1 file2 ... [ < script ]
#
# OPTIONS
#	-e	Use a custom ${EDITOR} for entering scripting commands.
#		This option _may_ disable the ability to pipe or redirect data 
#		to this tool; check with your text editor.
#
#	-h	Display this help message.
#
# ARGUMENTS
#	file	Path to a file (non-directory).
#
#	script	Path to an existing script file (non-directory).
#
# DESCRIPTION
#	Allows the user to execute a Bash script for each line in the specified
#	files. The script given by the user is interpreted directly by the BASH
#	shell.
#
#	If you wish to input your custom script using a text editor, set a 
#	global shell variable ${EDITOR} to the path of your favorite text 
#	editor. For example: `export EDITOR='path to editor'`.
#
#	If you wish to invoke an existing script, you can do so via piping or 
#	redirection. For example, to run a script named 'my_script' upon a 
#	file 'my_file', you would run the following.
#
#		Method 1: 	fl my_file < my_script
#		
#		Method 2:	cat my_script | fl my_file
#
#	Notice that the '-e' option is not present. Depending on how your text
#	editor handles I/O redirection, omitting '-e' may allow you to pipe or
#	redirect input to this tool.
#
# SCRIPT VARIABLES
#	The following variables are available for use in users' scripts.
#
#	$f	basename of current file (non-directory)
#	$d	absolute path of current working directory
#	$p	absolute path of current file (non-directory)
#	$n	total number of lines in current file (non-directory)
#	$i	number of current line
#	$l	contents of current line
#
# AUTHORS
# 	Suraj Kurapati <skurapat@ucsc.edu>
#
# LICENSE
#	This program is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; either version 2 of the License, or   
#	(at your option) any later version.
#
#####

# globals
	g_tmpfileMask="/tmp/$$"
	g_tmpfile_UsrInput="${g_tmpfileMask}.usrInput"
	
	# option flags
	g_options="eh"
	g_opt_editor=e
	
	# option enabled flags. enabled = 1, disabled = 0
	g_optEn_editor=0
	
# scan options and set flags

	while getopts "$g_options" opt
	do
		case "$opt" in
			$g_opt_editor)
				g_optEn_editor=1
			;;
			*)
				# display help message, which happens to be the documentation header for this file
				cat $0 | sed -e '/^####/q' -e 's/^# *//' | more
				exit 0
			;;
		esac
	done
	
	
# allow user to input scripting commands
	
	if [ $g_optEn_editor -eq 1 ] && [ ! -z "$EDITOR" ] ; then
		# launch user's editor
		$EDITOR $g_tmpfile_UsrInput
	else
		# 'cat' allows piping and input redirection
		cat > $g_tmpfile_UsrInput
	fi
	
# check user script
	if [ -z "$g_tmpfile_UsrInput" ] ; then
		
		# user has aborted. clean up and exit
		rm -f ${g_tmpfileMask}*
		exit
	else
		g_input=$( cat "$g_tmpfile_UsrInput" )
	fi

# operate iteratively on given files, don't handle subdirs
	
	# set path of current directory
	d="$PWD"
	
	# loop through positional params
	for f
	do
		# set scripting var
		p="$d/$f"
		
		# determine file size
		n=$( wc -l "$f" | awk '{ print $1 }' )
		let "i = 1"
		
		while [ $i -le $n ]
		do
			# read line from file
			l=$( sed -n "$i p" "$f" )
			
			# execute user specified commands
			eval "$g_input"
			
			# increment line number
			let "i = i + 1"
		done
	done
	
# cleanup
	rm -f ${g_tmpfileMask}*

