<?xml version="1.0" encoding="utf-8"?>
<!--
	Copyright 2003, 2004, 2005, 2006 Suraj N. Kurapati.

	Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled "GNU Free Documentation License".
-->

<!--
	The general strategy is to put information within the manual-page section and explain that information within the remainder of the text/discussion.
-->



<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
	<!-- imports -->
	<!ENTITY % sharedDTD SYSTEM "shared.dtd">
  %sharedDTD;

	<!ENTITY fdl:appendix SYSTEM "fdl.xml">


	<!-- content -->
	<!ENTITY ff.abstract "This manual explains how to install, use, and extend &ff:ulink;.">
	<!ENTITY ff.intro "&ff:ulink; is a <ulink url='&bashManual.function.url;'>&bash; function</ulink> that enables you to run an arbitrary set of &bash; commands upon an arbitrary set of <link linkend='ref:ff-synopsis-object'>objects</link>. It is often used for, but is not limited to, performing repetitive tasks such as renaming, extracting, moving, and manipulating a large number of files. &ff.announce;.">

	<!ENTITY installDir.var "<replaceable>installDir</replaceable>">
	<!ENTITY installDir:link "<link linkend='proc:installing-extraction'>&ff;'s installation directory</link>">

	<!ENTITY needRecursiveOption:important "<important><para>This option has no effect when used without the <xref linkend='ref:ff-options-beRecursive'/> option.</para></important>">
	<!ENTITY ctrlFuncParam.desc "Its parameters are objects that have been specified as arguments on the command-line only. Therefore, objects specified on the standard input stream with the <xref linkend='ref:ff-options-pipedObjects'/> option are not passed to this function.">
	<!ENTITY iso639-code.desc "the &iso639; code of the human language for which you are performing this localization">
	<!ENTITY exampleOutput.desc "Shown below is output generated by this script when invoked with some sample arguments.">
	<!ENTITY userMailList:ulink "<ulink url='&ff.url-mailingList-user;'>our mailing list for discussion among users and developers</ulink>">
]>
<book lang="en">
	<bookinfo>
		<title>&ff; user's manual</title>

		&snk:author;
		&snk:copyright;

		<abstract>
			<para>&ff.abstract;</para>
		</abstract>

		<revhistory>
			<revision>
				<revnumber>1.4</revnumber>
				<date>&ff.date;</date>
				<authorinitials>&snk:authorinitials;</authorinitials>
				<revremark>Added info about Gna! services. Added "hacking", "getting help", and "examples of useage" sections.</revremark>
			</revision>

			<revision>
				<revnumber>1.3</revnumber>
				<date>2005-12-18</date>
				<authorinitials>&snk:authorinitials;</authorinitials>
				<revremark>Added enough new content for 2.0 release.</revremark>
			</revision>

			<revision>
				<revnumber>1.2</revnumber>
				<date>2005-11-03</date>
				<authorinitials>snk</authorinitials>
				<revremark>Extensive refactoring of old document structure and content.</revremark>
			</revision>

			<revision>
				<revnumber>1.1</revnumber>
				<date>2005-11-02</date>
				<authorinitials>snk</authorinitials>
				<revremark>Initial port of user manual from old script-based manpage to DocBook-XML.</revremark>
			</revision>
		</revhistory>

		<legalnotice>
			<para>Permission is granted to copy, distribute and/or modify this document under the terms of the &gnu; Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled "&gnu; Free Documentation License".</para>
		</legalnotice>
	</bookinfo>

	<chapter id="chp:intro">
		<title>Introduction</title>
		<para>&ff.intro;</para>

		<section id="sec:what-should-i-know">
			<title>What should I know?</title>
			<para>This manual assumes that you have, at minimum, a basic understanding of:
				<itemizedlist>
					<listitem>
						<para>how to run commands using the <ulink url="http://en.wikipedia.org/wiki/Bash">&bash; shell</ulink>.</para>
					</listitem>
					<listitem>
						<para><ulink url="http://en.wikipedia.org/wiki/Unix">&unix;</ulink> concepts such as <ulink url="http://en.wikipedia.org/wiki/Path_%28computing%29">path</ulink>, <ulink url="http://en.wikipedia.org/wiki/Pipe_%28Unix%29">pipe</ulink>, <ulink url="http://en.wikipedia.org/wiki/Standard_streams">standard streams</ulink>, and so on.</para>
					</listitem>
					<listitem>
						<para>computer science concepts such as <ulink url="http://en.wikipedia.org/wiki/String_%28computer_science%29">string</ulink>, <ulink url="http://en.wikipedia.org/wiki/Function_%28computer_science%29">function</ulink>, <ulink url="http://en.wikipedia.org/wiki/Variable_%28computer_science%29">variable</ulink>, <ulink url="http://en.wikipedia.org/wiki/Recursion">recursion</ulink>, <ulink url="http://en.wikipedia.org/wiki/Pattern_matching">pattern</ulink>, and so on.</para>
					</listitem>
					<listitem>
						<para>traditional <ulink url="http://en.wikipedia.org/wiki/Manpage">&unix;-style manual pages</ulink> and how they are organized.</para>
					</listitem>
				</itemizedlist>
			</para>
		</section>
	</chapter>

	<chapter id="chp:getting-started">
		<title>Getting started</title>
		<para>First, ensure you have the <link linkend="sec:dependencies">necessary dependencies</link> to run &ff;. Next, <link linkend="sec:installation">install &ff;</link> onto your system. Finally, <link linkend="sec:invocation">invoke &ff;</link> at your command-prompt and away you go!</para>

		<section id="sec:dependencies">
			<title>Dependencies</title>
			<para>&ff; depends upon the software listed below to function correctly. If your system does not already have these dependencies, you can obtain them by following their respective hyper-links below.</para>

			<section id="sec:dependencies-required">
				<title>Required software</title>

				<variablelist>
					<varlistentry>
						<term><ulink url="http://www.gnu.org/software/bash/">&bash; shell</ulink></term>
						<listitem>
							<para>Version 3 or newer of this software is required because it provides regular expression capabilities. &ff; has been developed and tested successfully using version 3.00.16(1) of this software.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>

			<section id="sec:dependencies-optional">
				<title>Recommended software</title>

				<variablelist>
					<varlistentry>
						<term><ulink url="http://www.gnu.org/software/coreutils/">&gnu; coreutils</ulink></term>
						<listitem>
							<para>This software, called "core utilities", provides a collection of programs that are, in the author's mind, essential for daily computing.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>

		<section id="sec:installation">
			<title>Installing &ff;</title>

			<procedure id="proc:installing">
				<title>Installing &ff;</title>

				<step>
					<para><ulink url="&ff.url-download;">Obtain the newest release</ulink> of &ff;.</para>
				</step>

				<step id="proc:installing-extraction">
					<para>Extract the obtained archive to a location&mdash;henceforth denoted by &installDir.var;&mdash;of your choice by running the command <command>bunzip2 -c <filename>ff-bash-&ff.version;.tar.bz2</filename> | tar -C &installDir.var; -vxf -</command> at your command-prompt.</para>
				</step>

				<step>
					<para>Using your favorite text editor, (1) append the following text to the &bashrc.file; file and (2) be sure to replace the word &installDir.var; with the location it denotes (see <xref linkend="proc:installing-extraction"/>) before committing your changes.</para>

					<programlisting>
export FF_HOME="&installDir.var;"
export MANPATH="$MANPATH:$FF_HOME/doc/man"
source "&ff.file;"
					</programlisting>
				</step>

				<step id="proc:installing-sourcingBash">
					<para>Update your &bash; session by running the command <command>source &bashrc.file;</command> at your command-prompt.</para>
				</step>
			</procedure>
		</section>

		<section id="sec:examplesOfUse">
			<title>Examples of useage</title>
			<para>The examples below demonstrate some of the tasks &ff; can be used to perform. In addition, the <filename>$FF_HOME/examples/</filename> directory contains several example scripts that perform more complex tasks than those shown below. The first few lines of these scripts contain a description of their purpose&mdash;which you can quickly view by running the command <command>head <replaceable>$FF_HOME/examples/*</replaceable></command>.</para>

			<tip>
				<title>Learn &bash;'s string operations</title>
				<para>You can make better use of &ff; by learning &bash;'s <ulink url="&advBashGuide.stringOps.url;">string manipulation</ulink> and <ulink url="&bashManual.patternMatching.url;">globbing syntax</ulink>. An immediate effect of such knowledge is the ability to perform complex string operations without having to type so much code!</para>
			</tip>

			<example id="ex:renaming-file-suffixes">
				<title>Renaming file suffixes</title>
				<para>Suppose that you wanted to rename the suffix of files, which reside anywhere within the <filename>/tmp</filename> directory, from ".tgz", ".taz", and ".tar.Z" to "tar.gz". You can do this by running the command <command>&ff.cmd; <option>-e</option> <replaceable>'mv "$o" "${o/%@(tgz|taz|tar.Z)/tar.gz}"'</replaceable> <option>-r</option> <replaceable>/tmp</replaceable></command>.</para>
			</example>

			<example id="ex:renaming-lowerCase">
				<title>Converting file names into lower-case</title>
				<para>Suppose that you wanted to rename files, which reside in your working directory, such that their names are expressed using lower-case letters. You can do this by running the command <command>&ff.cmd; <replaceable>*</replaceable> <option>-e</option> <replaceable>'mv "$o" "$d/$( tr "[:upper:]" "[:lower:]" &lt;&lt;&lt; "$n" )"'</replaceable></command>.</para>
			</example>

			<example id="ex:setting-file-permissions">
				<title>Setting file permissions conditionally</title>
				<para>Suppose that you wanted to change file permissions of files, which reside in your working directory, such that directories are executable and everything else is not. You can do this by running the command <command>&ff.cmd; <replaceable>*</replaceable> <option>-e</option> <replaceable>'test -d "$o" &amp;&amp; chmod +x "$o" || chmod -x "$o"'</replaceable></command>.</para>
			</example>

			<example id="ex:dumping-id3-tags">
				<title>Capturing ID3 tag information from MP3 files into XML</title>
				<para>Suppose that you wanted to capture all ID3 tag information from MP3 files, which reside anywhere within the <filename>/music</filename> directory, into an XML file called <filename>dump.xml</filename>. You can do this by running the command <command>&ff.cmd; <option>-f</option> <replaceable>$FF_HOME/examples/id3ToXml.ff</replaceable> <option>-rm</option> <replaceable>'*[Mm][Pp]3'</replaceable> <replaceable>/music</replaceable> &gt; <replaceable>dump.xml</replaceable></command>.</para>
			</example>

			<example id="ex:extracting-fileArchives">
				<title>Extracting file archives without making a mess</title>
				<para>Suppose that you wanted to extract various kinds of file archives, which reside in your working directory, into their own respective directories so that they do not make a mess by extracting directly into your working directory. You can do this by running the command <command>&ff.cmd; <option>-f</option> <replaceable>$FF_HOME/examples/extract.ff</replaceable> <replaceable>*</replaceable></command>.</para>
			</example>
		</section>

		<section id="sec:getting-support">
			<title>Getting support</title>
			<para>You can get support by posting your problem to the <ulink url="&ff.url-tracker-support;">support tracker</ulink> or to &userMailList:ulink; where you can discuss the problem with others.</para>
		</section>
	</chapter>

	<chapter id="chp:using">
		<title>Using &ff;</title>

		<procedure id="proc:using">
			<title>Using &ff;</title>

			<step performance="required">
				<para><link linkend="sec:invocation">Invoke &ff;</link> at a command-prompt.</para>
			</step>

			<step>
				<para>If you did not specify <link linkend="sec:writing-scripts">your script</link> in the previous step, then &ff; will give you a chance to <link linkend="ex:typing-script-at-prompt">type it at your command-prompt</link>.</para>

				<substeps>
					<step>
						<para>Type your script using as much space as you need. That is, your script can take up multiple lines: you can start a new line by pressing the <keycap>Enter</keycap> or <keycap>Return</keycap> key.</para>

						<tip>
							<title>&gnu; Readline shortcuts</title>
							<para>While typing your script, you can use <ulink url="http://cnswww.cns.cwru.edu/~chet/readline/rluserman.html#SEC4">&gnu; Readline shortcuts</ulink> such as <keycombo action="press"><keycap>Ctrl</keycap><keycap>u</keycap></keycombo> to erase everything between the cursor and the beginning of a line; and <keycombo action="press"><keycap>Ctrl</keycap><keycap>k</keycap></keycombo> to erase everything between the cursor and the end of a line.</para>
						</tip>
					</step>

					<step>
						<para>Press <keycombo action="press"><keycap>Ctrl</keycap><keycap>d</keycap></keycombo> on a new, blank line to tell &ff; that you have finished typing your script.</para>
					</step>
				</substeps>
			</step>

			<step>
				<para>&ff; will now run your script, return a <link linkend="ref:ff-exitStatus">diagnostic value as its exit status</link>, and terminate.</para>
			</step>
		</procedure>

		<example id="ex:typing-script-at-prompt">
					<title>Typing your script at a command-prompt</title>
					<screen>
<prompt>$</prompt> <userinput><command>&ff.cmd; <replaceable>World</replaceable></command></userinput>
<userinput>echo -n "Hello, $o! Today is "
date
<keycombo action="press"><keycap>Ctrl</keycap><keycap>d</keycap></keycombo></userinput>
<computeroutput>Hello, World! Today is Thu Nov  3 15:32:16 PST 2005</computeroutput>
					</screen>
		</example>

		<section id="sec:invocation">
			<title>Invoking &ff;</title>
			<para>First, examine the <link linkend="ref:ff-synopsis">invocation syntax, or synopsis,</link> presented in the <link linkend="ref:ff">&unix;-style manual page</link>. This syntax tells us that:

				<itemizedlist>
					<listitem>
						<para>&ff; can be invoked without any arguments because its parameters are optional (denoted by the square brackets which surround a parameter).</para>
					</listitem>

					<listitem>
						<para>each parameter may be repeated indefinitely (denoted by the ellipsis appended to a parameter). That is, you can specify more than one option and more than one object while invoking &ff;.</para>
					</listitem>

					<listitem>
						<para>the order in which options and objects are specified is irrelevant (denoted by the &pipe; between adjacent parameters).</para>

						<para>For example, the command <command>&ff.cmd; <replaceable>/bin</replaceable> <option>-e</option> <replaceable>'echo $o'</replaceable></command> has the same effect as the command <command>&ff.cmd; <option>-e</option> <replaceable>'echo $o'</replaceable> <replaceable>/bin</replaceable></command>. However, note that the command <command>&ff.cmd; <replaceable>'echo $o'</replaceable> <option>-e</option>  <replaceable>/bin</replaceable></command> <emphasis>does not</emphasis> have the same effect as the previous two because it specifies a different argument for the <xref linkend="ref:ff-options-evalExpr"/> option.</para>
					</listitem>
				</itemizedlist>
			</para>

			<para>Now you are ready to invoke &ff;, using the aforementioned invocation syntax, by running the appropriate command at your command-prompt.</para>
		</section>

		<section id="sec:writing-scripts">
			<title>Writing scripts</title>
			<para>In order for &ff; to be useful, you must give it some work to do. You can tell &ff; what operations you want it to perform, on the objects passed to it, by specifying those operations in something called a "script".</para>

			<para>A script is either (1) a list of &bash; commands or (2) a full fledged &bash; <ulink url="http://en.wikipedia.org/wiki/Shell_script">shell script</ulink>. It is examined<footnote id="fot:shell-evaluates-script">
					<para>&ff; simply glances at the commands while employing the &bash; shell to do the heavy lifting&mdash;parsing and executing the commands&mdash;through the <command>eval</command> command. For this reason, a script written for &ff; is no different than a script written for &bash;.</para>
				</footnote> and executed by &ff; much like the script of a theatrical play is examined, recited, and exhibited by an actor.</para>

			<section id="sec:object-variables">
				<title>Object variables</title>
				<para><link linkend="ref:ff-objVars">Object variables</link> let your script interact with <link linkend="ref:ff-synopsis-object">objects</link> specified by the user. These variables represent various aspects of an object's value or name. In addition, they are available for use anywhere within your script and are automatically updated (immediately before) each time &ff; invokes the <xref linkend="ref:ff-ctrlFuncs-during"/> <link linkend="sec:control-functions">control function</link>.</para>

				<example id="ex:object-vars-demo">
					<title>Seeing what information object variables provide</title>

					<para>In order to see what kinds of information object variables provide, consider the following script which displays each object variable and its value.</para>

					<programlisting>
echo "\$o = $o"
echo "\$d = $d"
echo "\$n = $n"
echo "\$p = $p"
echo "\$s = $s"
echo ----------
					</programlisting>

					<para>Suppose that this script has been written to a file called <filename>objectVars.ff</filename>. &exampleOutput.desc;</para>

					<screen>
<prompt>$</prompt> <userinput><command>&ff.cmd; <option>-f</option> <replaceable>objVars.ff</replaceable> <replaceable>/var/log/mail*</replaceable></command></userinput>
$o = /var/log/mail.err
$d = /var/log
$n = mail.err
$p = mail
$s = err
----------
$o = /var/log/mail.info
$d = /var/log
$n = mail.info
$p = mail
$s = info
----------
$o = /var/log/mail.log
$d = /var/log
$n = mail.log
$p = mail
$s = log
----------
$o = /var/log/mail.warn
$d = /var/log
$n = mail.warn
$p = mail
$s = warn
----------
					</screen>
				</example>
			</section>

			<section id="sec:control-functions">
				<title>Control functions</title>
				<para><link linkend="ref:ff-ctrlFuncs">Control functions</link> give your script more control over its execution by allowing it to execute portions of its code at different times. You are not required to implement these functions in order to use &ff; because it automatically places your script inside the <xref linkend="ref:ff-ctrlFuncs-during"/> control function if your script does not implement any control functions. For this reason, if you do decide to implement any of these functions, then &ff; requires that you implement the <xref linkend="ref:ff-ctrlFuncs-during"/> control function as well.</para>

				<para>To illustrate how control functions give your script more control over its execution, consider the following examples.</para>

				<example id="ex:cleaning-temporary-files">
					<title>Cleaning up temporary files</title>
					<para>If your script creates temporary files during execution, then you can place code that removes the temporary files in the <xref linkend="ref:ff-ctrlFuncs-end"/> control function to guarantee that your script does not leave a mess when a user forcefully terminates it.</para>

					<para>For example, consider the following script which collects the <xref linkend="ref:ff-objVars-o"/> variable's value in a temporary file called <filename>tempFile</filename>, shows the contents of the temporary file with line numbers, and finally removes the temporary file.</para>

					<programlisting>
during() {
	echo "$o" >> tempFile
}
after() {
	cat -n tempFile
}
end() {
	rm -v tempFile
}
					</programlisting>

					<para>Suppose that this script has been written to a file called <filename>cleanTemp.ff</filename>. &exampleOutput.desc;</para>

					<screen>
<prompt>$</prompt> <userinput><command>&ff.cmd; <option>-f</option> <replaceable>cleanTemp.ff</replaceable> <replaceable>foo</replaceable> <replaceable>bar</replaceable></command></userinput>
     1  foo
     2  bar
removed `tempFile'
					</screen>
				</example>

				<example id="ex:script-options">
					<title>Command-line options for your script</title>
					<para>Just like &ff;, your script can have command-line options that let a user change its behavior. To do this, your script can look for options among the objects passed to any control function. However, the <xref linkend="ref:ff-ctrlFuncs-before"/> control function is usually the best place to look for options because it can set flags that change your script's behavior <emphasis>before</emphasis> any objects have been processed by your script.</para>

					<para>For example, consider the following script which recognizes two options: <option>-foo</option> and <option>-bar</option>. When this script is invoked with some arguments, it looks for options among those arguments and notifies us accordingly.</para>

					<programlisting>
before() {
	for arg
	do
		case $arg in
			-foo|-bar)
				echo "This is an option: $arg"
			;;

			*)
				echo "This is an argument: $arg"
			;;
		esac
	done
}
during() { :; }
					</programlisting>

					<para>Suppose that this script has been written to a file called <filename>scriptArgs.ff</filename>. Shown below is output generated by this script when invoked with some sample arguments.</para>

					<screen>
<prompt>$</prompt> <userinput><command>&ff.cmd; <option>-f</option> <replaceable>scriptArgs.ff</replaceable> <option>--</option> <replaceable>-foo</replaceable> <replaceable>-moz</replaceable> <replaceable>-bar</replaceable> <replaceable>10.3</replaceable></command></userinput>
This is an option: -foo
This is an argument: -moz
This is an option: -bar
This is an argument: 10.3
					</screen>
				</example>
			</section>
		</section>
	</chapter>

	<chapter id="chp:extending">
		<title>Extending &ff;</title>
		<para>This chapter describes several ways, ranging from giving simple feedback to hacking the source itself, in which you can help extend and improve &ff;.</para>

		<section id="sec:feedback">
			<title>Giving feedback</title>
			<para>There are several ways to give feedback through the <ulink url="&ff.url-project;">&gna; project website for &ff;</ulink>.  Feel at liberty to voice your opinion, ask questions, and discuss related topics on &userMailList:ulink;. In addition, you can <ulink url="&ff.url-tracker-defects;">report defects using the bug tracker</ulink> and <ulink url="&ff.url-tracker-search;">search for items in all trackers</ulink>.</para>
		</section>

		<section id="sec:contributing">
			<title>Contributing to &ff;</title>
			<para>First, join our <ulink url="&ff.url-mailingList;">developer and commits mailing lists</ulink>. The developer list is the primary forum of discussion among developers and therefore all development questions should be posted there. In addition, it may be prudent to check the list archives, for previous discussion about your question, before posting. The commits list receives automated posts about commits to our Subversion repository.</para>

			<para>Next, obtain a copy of the newest source <ulink url="&ff.url-svn;">from our Subversion repository</ulink> by running the command <command>svn co &ff.url-svnRepo;</command> or by using a graphical front-end to Subversion.</para>

			<para>Now modify your local copy of the source and submit patches&mdash;always create patches with respect to the newest source in the repository&mdash;to <ulink url="&ff.url-tracker-patches;">the patches tracker</ulink>. Familiarize yourself with <ulink url="http://tldp.org/HOWTO/Software-Release-Practice-HOWTO/patching.html">good patching practices</ulink> to improve the chances of your patches being accepted and incorporated, and also <ulink url="http://www.linuxjournal.com/article/1237">the process of creating patches</ulink> if necessary.</para>
		</section>

		<section id="sec:localization">
			<title>Localizing &ff;</title>
			<para>&ff; has been designed with <ulink url="http://en.wikipedia.org/wiki/L10n">localization (&l10n;)</ulink> in mind to allow for easy addition and improvement of &l10n; bundles&mdash;a set of strings or messages localized for a particular human language.</para>

			<procedure id="proc:adding-l10n-bundle">
				<title>Adding a &l10n; bundle</title>
				<para>This procedure outlines the steps necessary to add a &l10n; bundle for the <filename>&ff.file;</filename>.</para>

				<step>
					<para>Determine the &iso639:ulink; code of the human language you wish to localize.</para>
				</step>

				<step>
					<para>Using your favorite text editor, open the &ff.file; file for editing.</para>

					<substeps>
						<step>
							<para>Make a copy of the <function>ffL10nBundle_en</function> function and change the last two characters, which happen to be "en" in this case, in its name to &iso639-code.desc;.</para>
						</step>

						<step>
							<para>Localize the value, while taking care to preserve any <ulink url="http://en.wikipedia.org/wiki/Printf#printf_format_placeholders">printf formatting placeholders</ulink>, of each variable present within your copy of the <function>ffL10nBundle_en</function> function.</para>
						</step>

						<step>
							<para>Write your changes to the &ff.file; file and away you go!</para>
						</step>
					</substeps>
				</step>
			</procedure>

			<tip id="tip:testing-l10n-bundle">
				<title>Testing your &l10n; bundle</title>
				<para>You can test your &l10n; bundle by (1) <link linkend="proc:installing-sourcingBash">updating your current &bash; session</link>, and then (2) running the command <command>LANG=<replaceable>foo</replaceable> &ff.cmd;</command> where <replaceable>foo</replaceable> denotes &iso639-code.desc;.</para>
			</tip>
		</section>
	</chapter>

	<appendix>
		<title>Traditional &unix;-style manual pages</title>

		<refentry id="ref:ff">
			<refmeta>
				<refentrytitle>
					<application>&ff.cmd;</application>
				</refentrytitle>
				<manvolnum>1</manvolnum>
			</refmeta>

			<refnamediv>
				<refname>
					<application>&ff.cmd;</application>
				</refname>
				<refpurpose>Run &bash; commands on objects.</refpurpose>
			</refnamediv>

			<refsynopsisdiv>
				<cmdsynopsis id="ref:ff-synopsis">
					<command>&ff.cmd;</command>
					<group choice="opt">
						<arg rep="repeat">option</arg>
						<arg rep="repeat">object</arg>
					</group>
				</cmdsynopsis>

				<variablelist>
					<varlistentry id="ref:ff-synopsis-option">
						<term>option</term>
						<listitem>
							<para>A mechanism which lets you control how &ff; behaves. See <xref linkend="ref:ff-options"/> for a list of available options.</para>

							<tip>
								<title>Combining short options</title>
								<para>You can combine a series of short options into a single word. For example, the series <command><option>-a</option> 1 <option>-b</option> 2 <option>-c</option> 3</command> can be combined into <command><option>-abc</option> 1 2 3</command>.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry id="ref:ff-synopsis-object">
						<term>object</term>
						<listitem>
							<para>Something that is passed as an argument to your script for processing. &ff; places no restrictions on what an object can represent. Thus, your script has complete authority in deciding the semantics of an object.
							</para>

							<para>For example, if your script renames files, then objects are files. Likewise, if your script downloads data from &url;s, then objects are &url;s.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</refsynopsisdiv>

			<refsection>
				<title>Description</title>
				<para>&ff.intro;</para>

				<note>
					<para>This traditional &unix;-style manual page is intentionally terse. See the &ff; user's manual for a user-friendly supplement&mdash;complete with explanations and examples&mdash;to this manual page.</para>
				</note>
			</refsection>

			<refsection id="ref:ff-options">
				<title>Options</title>
				<variablelist>
					<varlistentry id="ref:ff-options-stopScan">
						<term>
							<option>--</option>
						</term>
						<listitem>
							<para>Stop looking for options among the given arguments and consider that the remaining arguments are objects.</para>

							<para>With this option, you can safely specify objects whose names begin with a &hyphen;. Such objects would otherwise be mistaken for options. For example, you can specify two objects named <option>-foo</option> and <option>-bar</option> by writing them as <command><option>--</option> <option>-foo</option> <option>-bar</option></command>.</para>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-options-evalExpr">
						<term>
							<option>-e</option>
							<replaceable>expression</replaceable>
						</term>
						<term>
							<option>--expression</option>
							<replaceable>expression</replaceable>
						</term>
						<listitem>
							<para>Consider that <replaceable>expression</replaceable> is the user's script instead of asking the user to type a script at the command-prompt.</para>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-options-evalFile">
						<term>
							<option>-f</option>
							<replaceable>file</replaceable>
						</term>
						<term>
							<option>--file</option>
							<replaceable>file</replaceable>
						</term>
						<listitem>
							<para>Consider that <replaceable>file</replaceable> contains the user's script instead of asking the user to type a script at the command-prompt.</para>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-options-pipedObjects">
						<term>
							<option>-p</option>
						</term>
						<term>
							<option>--pipe</option>
						</term>
						<listitem>
							<para>Read the standard input stream for objects delimited by the new-line character. In other words, these objects should be listed one per line on the standard input stream.</para>

							<note>
								<para>Objects specified as command-line arguments are processed by the user's script before those specified on the standard input stream.</para>
							</note>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-options-suffixDelim">
						<term>
							<option>--suffix-delim</option>
							<replaceable>delimiter</replaceable>
						</term>
						<listitem>
							<para>Consider that <replaceable>delimiter</replaceable> separates the <link linkend="ex:object-name-parts">prefix and suffix</link> of an object's name. The default suffix delimiter is a &period;.</para>

							<example id="ex:object-name-parts">
								<title>The parts of an object's name</title>
								<para>
									The name of an object called <filename>foo.bar.baz</filename> can be divided into the following parts:

									<itemizedlist>
										<listitem>
											<para>the prefix: <literal>foo.bar</literal></para>
										</listitem>
										<listitem>
											<para>the suffix delimiter: <literal>.</literal></para>
										</listitem>
										<listitem>
											<para>the suffix: <literal>bar</literal></para>
										</listitem>
									</itemizedlist>
								</para>
							</example>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-options-beRecursive">
						<term>
							<option>-r</option>
						</term>
						<term>
							<option>--recursive</option>
						</term>
						<listitem>
							<para>Recursively traverse into objects, which happen to be directories or symbolic links that point to directories, in a <link linkend="ex:breadth-first-recursion">breadth-first manner</link>.</para>

							<example id="ex:breadth-first-recursion">
								<title>Order of processing in breadth-first recursion</title>
								<para>When breadth-first recursion is used, all objects in a directory are processed linearly by the user's script <emphasis>before</emphasis> any sub-directories are processed recursively.</para>

								<para>For example, in the directory structure below, the objects <filename>foo/</filename> and <filename>bar/</filename> are directories. When &ff; is invoked to run the user's script recursively upon <filename>foo/</filename>, the objects <filename>foo/bar</filename> and <filename>foo/moz</filename> are processed linearly <emphasis>before</emphasis> <filename>foo/bar</filename> is processed recursively. In this manner, <filename>foo/bar/baz</filename> will be the last object to be processed by the user's script.</para>

								<itemizedlist>
									<listitem>
										<para><filename>foo/</filename></para>

										<itemizedlist>
											<listitem>
												<para><filename>bar/</filename></para>

												<itemizedlist>
													<listitem>
														<para><filename>baz</filename></para>
													</listitem>
												</itemizedlist>
											</listitem>

											<listitem>
												<para><filename>moz</filename></para>
											</listitem>
										</itemizedlist>
									</listitem>
								</itemizedlist>
							</example>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-options-handleHidden">
						<term>
							<option>-a</option>
						</term>
						<term>
							<option>--all</option>
						</term>
						<listitem>
							<para>Do not ignore objects whose names begin with a &period;.</para>

							&needRecursiveOption:important;
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-options-ignoreLinks">
						<term>
							<option>-L</option>
						</term>
						<term>
							<option>--ignore-links</option>
						</term>
						<listitem>
							<para>Do not traverse into symbolic links that point to directories.</para>

							&needRecursiveOption:important;
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-options-objectMask">
						<term>
							<option>-m</option>
							<replaceable>glob</replaceable>
						</term>
						<term>
							<option>--mask</option>
							<replaceable>glob</replaceable>
						</term>
						<listitem>
							<para>Process objects only if their names match <replaceable>glob</replaceable> &glob.see;.</para>

							<para>If <replaceable>glob</replaceable> is a fixed string and does not use any globbing notation, then it will be appended to the name of every object that matches the <literal>*</literal> glob. This happens because &ff; does not check if an object exists in the file-system before having your script process the object. For example, try running the command <command>&ff.cmd; <option>-r</option> <replaceable>/etc</replaceable> <option>-m</option> <replaceable>globbyGlob</replaceable> <option>-e</option> <replaceable>'echo "$o"'</replaceable></command> and notice how all echoed paths have the word "globbyGlob" appended to them.</para>

							<caution>
								<para>Unless the <xref linkend="ref:ff-options-handleHidden"/> option is also specified, objects whose names begin with a &period; are not checked to see if their names match <replaceable>glob</replaceable>.</para>

								<para>For example, objects with names such as <filename>.foo</filename> and <filename>.bar</filename> will not not checked to see if they match <replaceable>glob</replaceable>, whereas objects with names such as <filename>foo</filename> and <filename>bar</filename> will be checked.</para>
							</caution>

							&needRecursiveOption:important;

							<tip>
								<para>You can use extended globbing notation &extglob.see; in <replaceable>glob</replaceable>.</para>
							</tip>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-options-showHelp">
						<term>
							<option>-h</option>
						</term>
						<term>
							<option>--help</option>
						</term>
						<listitem>
							<para>Show the invocation syntax and a list of available options in extended globbing notation &extglob.see;.</para>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-options-beVerbose">
						<term>
							<option>-v</option>
						</term>
						<term>
							<option>--verbose</option>
						</term>
						<listitem>
							<para>Describe what you are doing, while you do it.</para>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-options-showVersion">
						<term>
							<option>-V</option>
						</term>
						<term>
							<option>--version</option>
						</term>
						<listitem>
							<para>Show the version of your release and your copyright.</para>
						</listitem>
					</varlistentry>

				</variablelist>
			</refsection>

			<refsection id="ref:ff-objVars">
				<title>Object variables</title>
				<variablelist>
					<varlistentry id="ref:ff-objVars-o">
						<term>
							<varname>$o</varname>
						</term>
						<listitem>
							<para>The value, exactly as it was specified by the user, of the current object.</para>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-objVars-d">
						<term>
							<varname>$d</varname>
						</term>
						<listitem>
							<para>Either a relative or absolute path to the directory which contains the current object.</para>

							<para>For example, if <varname>$o</varname> is "/foo/bar/baz/a.b.c.d" then <varname>$d</varname> will be "/foo/bar/baz".</para>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-objVars-n">
						<term>
							<varname>$n</varname>
						</term>
						<listitem>
							<para>The name of the current object without its path information.</para>

							<para>For example, if <varname>$o</varname> is "/foo/bar/baz/a.b.c.d" then <varname>$n</varname> will be "a.b.c.d".</para>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-objVars-p">
						<term>
							<varname>$p</varname>
						</term>
						<listitem>
							<para>The prefix of the current object's name.</para>

							<para>For example,
								<itemizedlist>
									<listitem>
										<para>if the <xref linkend="ref:ff-options-suffixDelim"/> option is not specified and <varname>$n</varname> is "a.b.c.d", then <varname>$p</varname> will be "a.b.c".</para>
									</listitem>

									<listitem>
										<para>if the <xref linkend="ref:ff-options-suffixDelim"/> option specifies "c" as the delimiter and <varname>$n</varname> is "a.b.c.d", then <varname>$p</varname> will be "a.b.".</para>
									</listitem>

									<listitem>
										<para>if the <xref linkend="ref:ff-options-suffixDelim"/> option specifies "X" as the delimiter and <varname>$n</varname> is "a.b.c.d", then <varname>$p</varname> will be "a.b.c.d".</para>
									</listitem>
								</itemizedlist>
							</para>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-objVars-s">
						<term>
							<varname>$s</varname>
						</term>
						<listitem>
							<para>The suffix of the current object's name.</para>

							<para>For example,
								<itemizedlist>
									<listitem>
										<para>if the <xref linkend="ref:ff-options-suffixDelim"/> option is not specified and <varname>$n</varname> is "a.b.c.d", then <varname>$s</varname> will be "d".</para>
									</listitem>

									<listitem>
										<para>if the <xref linkend="ref:ff-options-suffixDelim"/> option specifies "c" as the delimiter and <varname>$n</varname> is "a.b.c.d", then <varname>$s</varname> will be ".d".</para>
									</listitem>

									<listitem>
										<para>if the <xref linkend="ref:ff-options-suffixDelim"/> option specifies "X" as the delimiter and <varname>$n</varname> is "a.b.c.d", then <varname>$s</varname> will be empty.</para>
									</listitem>
								</itemizedlist>
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</refsection>

			<refsection id="ref:ff-ctrlFuncs">
				<title>Control functions</title>
				<variablelist>
					<varlistentry id="ref:ff-ctrlFuncs-before">
						<term>
							<function>before</function> <parameter>object...</parameter>
						</term>
						<listitem>
							<para>This control function is invoked before any object have been processed. &ctrlFuncParam.desc;</para>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-ctrlFuncs-during">
						<term>
							<function>during</function> <parameter>object</parameter>
						</term>
						<listitem>
							<para>This control function is invoked to process a single single object that was either specified as a command-line argument or on the standard input stream with the <xref linkend="ref:ff-options-pipedObjects"/> option. Thus, for each object specified, this control function is invoked once to process that object.</para>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-ctrlFuncs-after">
						<term>
							<function>after</function> <parameter>object...</parameter>
						</term>
						<listitem>
							<para>This control function is invoked after all object have been processed. &ctrlFuncParam.desc;</para>
						</listitem>
					</varlistentry>

					<varlistentry id="ref:ff-ctrlFuncs-end">
						<term>
							<function>end</function>
						</term>
						<listitem>
							<para>This control function is invoked immediately before &ff; terminates. It does not have any parameters.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</refsection>

			<refsection id="ref:ff-envVars">
				<title>Environment variables</title>
				<variablelist>
					<varlistentry id="ref:ff-envVars-ffHome">
						<term>
							<varname>$FF_HOME</varname>
						</term>
						<listitem>
							<para>This variable defines the path to &installDir:link;. Although &ff; itself neither uses nor requires this variable, some of the example scripts provided with &ff; depend upon this variable to function correctly.</para>
						</listitem>
					</varlistentry>


					<varlistentry id="ref:ff-envVars-lang">
						<term>
							<varname>$LANG</varname>
						</term>
						<listitem>
							<para>The first two characters of this variable's value denote the &iso639:ulink; language code of the user's preferred human language. For example, if <varname>$LANG</varname> is "te_IN.UTF-8" then "te" denotes the &iso639; language code of the user's preferred human language.</para>

							<para>Using this information, &ff; will attempt communicate with the user in their preferred human language. If it cannot, &ff; will assume that the user's preferred human language is English.</para>
						</listitem>
					</varlistentry>

					<!--<varlistentry id="ref:ff-envVars-editor">
						<term>
							<varname>$EDITOR</varname>
						</term>
						<listitem>
							<para>This variable defines the path to your text editor of choice. If undefined, &bash;'s built-in <command>read</command> command will be used as your text editor.</para>
						</listitem>
					</varlistentry>-->

					<varlistentry id="ref:ff-envVars-tmpDir">
						<term>
							<varname>$TMPDIR</varname>
						</term>
						<listitem>
							<para>This variable defines the path to a directory in which &ff; or users' scripts may create and use temporary files. If undefined, its value is assumed to be <filename>/tmp</filename>.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</refsection>

			<refsection id="ref:ff-exitStatus">
				<title>Exit status diagnostics</title>
				<variablelist>
					<varlistentry>
						<term>0</term>
						<listitem>
							<para>&ff; has fulfilled its duties successfully. Have a nice day!</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term>1</term>
						<listitem>
							<para>An error has occurred because of something &ff; has done.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term>2</term>
						<listitem>
							<para>An error has occurred because of something the user has done.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term>3</term>
						<listitem>
							<para>An error has occurred because of something the user's system has done or because of how it is configured.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term>4</term>
						<listitem>
							<para>An error has occurred because of something the user's script has done.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</refsection>
		</refentry>
	</appendix>

	&fdl:appendix;
</book>
