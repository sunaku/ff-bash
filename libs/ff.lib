#!/bin/bash
#
# Common function library for 'ff' and 'fl' tools.
#
# Dependencies:
#
# 	${__ff_myHome}*	- path to installation directory
#
###
#
# Copyright 2003-2004 Suraj N. Kurapati.
#
###
#
# This file is part of "For each File".
# 
# "For each File" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# "For each File" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with "For each File"; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
###

## globals

	__lib_ff_version=1.6.8
	__lib_ff_tmpMask="${TMP:-/tmp}/${__ff_myName}.$$"
	declare -a __lib_ff_cmdArgs		# array of command-line arguments
	
	# command line options
	
		__lib_ff_options_shortFlag_evalExpr=e
		__lib_ff_options_longFlag_evalExpr=expression
		
		__lib_ff_options_shortFlag_evalFile=f
		__lib_ff_options_longFlag_evalFile=file
		
		__lib_ff_options_shortFlag_readPipe=p
		__lib_ff_options_longFlag_readPipe=pipe
		
		__lib_ff_options_shortFlag_showHelp=h
		__lib_ff_options_longFlag_showHelp=help
		
		__lib_ff_options_shortFlag_showVersion=v
		__lib_ff_options_longFlag_showVersion=version
	
## functions
	
	# Initializes internal library structures
	__lib_ff_init()
	{
		source ${__ff_myResources_libs}/CmdOpts.lib
		
		source ${__ff_myResources_libs}/gettext.lib
		__lib_gettext_init
		__lib_gettext_load "$__ff_myResources_i18n/ff.lib.$__ff_myLang.po"
		
		source ${__ff_myResources_libs}/DocFmt.lib
	}

	# clean up and exit program
	# @param	1	exit status
	__lib_ff_exit()
	{
		# unload libraries
		__lib_gettext_fin
		
		# clean up temp files
		rm -f ${__lib_ff_tmpMask}*
		
		# exit with given code
		exit $1
	}

	# load user's script into RAM
	__lib_ff_loadScript()
	{
		local expression
			
		# store input
		
			if [ ${__lib_ff_options_isOn_evalExpr:-0} -eq 1 ]
			then
				expression=$__lib_ff_options_value_evalExpr
			elif [ ${__lib_ff_options_isOn_evalFile:-0} -eq 1 ]
			then
				# read script file
				if [[ -f "$__lib_ff_options_value_evalFile" && -r "$__lib_ff_options_value_evalFile" ]]
				then
					expression=$( < "$__lib_ff_options_value_evalFile" )
				else
					gettext "Error: Unable to read file %s." "\"$__lib_ff_options_value_evalFile\""
					__lib_ff_exit 2
				fi
			fi
			
		# check input 
		
			if [ -z "$expression" ]
			then
				gettext "Error: No shell commands specified."
				__lib_ff_exit 1
			fi
		# check input for control functions
		
			if ! echo "$expression" | grep 'main *\( *\)' >& /dev/null
			then
				expression="
main(){
$expression
:;}"
			fi
	
		# load script into RAM
			eval "$expression"
	}
	
	# Reads a list of targets that are piped in
	__lib_ff_readPipe()
	{
		if [ ${__lib_ff_options_isOn_readPipe:-0} -eq 1 ]
		then
			while read
			do
				__lib_ff_targetList[${#__lib_ff_targetList[@]}]=$REPLY
			done
		fi
	}
	
	# handles parsing of command-line options
	# @see __lib_CmdOpts_handleOption()
	__lib_ff_handleOption()
	{
		case $1 in
			$__lib_ff_options_shortFlag_evalExpr | $__lib_ff_options_longFlag_evalExpr)
				
				if [ ${__lib_ff_options_isOn_evalFile:-0} -eq 1 ] 
				then
					gettext "Error: Cannot use both %s and %s options simultaneously." "\"--$__lib_ff_options_longFlag_evalExpr\"" "\"--$__lib_ff_options_longFlag_evalFile\""
					__lib_ff_exit 1
				fi
			
				__lib_ff_options_isOn_evalExpr=1
				__lib_ff_options_value_evalExpr=$2
				return 2
			;;
			
			$__lib_ff_options_shortFlag_evalFile | $__lib_ff_options_longFlag_evalFile)
			
				if [ ${__lib_ff_options_isOn_evalExpr:-0} -eq 1 ] 
				then
					gettext "Error: Cannot use both %s and %s options simultaneously." "\"--$__lib_ff_options_longFlag_evalExpr\"" "\"--$__lib_ff_options_longFlag_evalFile\""
					__lib_ff_exit 1
				fi
				
				__lib_ff_options_isOn_evalFile=1
				__lib_ff_options_value_evalFile=$2
				return 2
			;;
			
			$__lib_ff_options_shortFlag_readPipe | $__lib_ff_options_longFlag_readPipe)
				__lib_ff_options_isOn_readPipe=1
				return 1
			;;
			
			$__lib_ff_options_shortFlag_showHelp | $__lib_ff_options_longFlag_showHelp)
				
				local __lib_ff_docFile="${__ff_myResources_docs}/${__ff_myName}.man" __lib_ff_docLang=$__ff_myLang __lib_ff_docI18n
					
				# choose translation catalog
				
					# allow user choice of translation language
					[ -n "$2" ] && __lib_ff_docLang=${2:0:2}
					
					__lib_ff_docI18n="${__ff_myResources_i18n}/${__ff_myName}.man.${__lib_ff_docLang}.po"
					
				# load translation catalog
					if [[ -f "$__lib_ff_docI18n" && -r "$__lib_ff_docI18n" ]]
					then
						__lib_gettext_load "$__lib_ff_docI18n"
					
					elif [ "$__lib_ff_docLang" != en ]
					then
						gettext "Error: Unable to read the translation catalog for language code %s." "\"$__lib_ff_docLang\""
						
						# query user to display English docs
						read -p "$( gettext "Would you like to view the documentation in English (%s/%s)? %s" "$( gettext "yes" )" "$( gettext "no" )" "[$( gettext "yes" )]" ) " < /dev/tty
						
						[[ -n "$REPLY" && "$REPLY" != "$( gettext "yes" )" ]] && __lib_ff_exit
					fi
				
				# display documentation
					source "$__lib_ff_docFile" | sed 's/\t/    /' | fmt -w 80 | less -R
				
				__lib_ff_exit
			;;
			
			$__lib_ff_options_shortFlag_showVersion | $__lib_ff_options_longFlag_showVersion)
				echo $__lib_ff_version
				__lib_ff_exit
			;;
		esac
		
		return 0
	}
	
	# base application logic
	__lib_ff_main()
	{
		# ensures proper clean up
			trap '__lib_ff_exit 9' INT KILL TERM HUP

		# scan command line options

			# NOTE: assuming '$__lib_ff_targetList' is already initialized
			if ! __lib_CmdOpts_scanOptions "__lib_ff_targetList"
			then
				gettext "Error: %s is not a valid option. Try %s." "\"$__lib_ff_targetList\"" "\"--$__lib_ff_options_longFlag_showHelp\""
				__lib_ff_exit 1
			fi
			
		# handle user's script

			# load script into RAM
			__lib_ff_loadScript

			# handle piped targets
			__lib_ff_readPipe
				
			# execute script
			__ff_main

		# finished
			__lib_ff_exit
	}

