#!/bin/bash
#
# Command-line options parsing library.
#
# Note: the function '__lib_CmdOpts_handleOption()' must be overridden by the client script.
#
###
#
# Copyright 2003-2004 Suraj N. Kurapati.
#
###
#
# This file is part of "For each File".
# 
# "For each File" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# "For each File" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with "For each File"; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
###

## globals


## functions
	
	#/**
	# Scans the array whose name is given by $1 for command-line options. When an option is found, '__lib_CmdOpts_handleOption()' is invoked. If an option and its possible argument are handled properly, they are removed from the array whose name is given by $1.
	#
	# @param	1	Name of the array which contains command-line arguments.
	# @return	1	An illegal option was encountered. The name of this option is stored in the first index of the array whose name is given by $1.
	#*/
	__lib_CmdOpts_scanOptions()
	{
#		declare -a ; read < /dev/tty
		
		local i=0 j=0 k opt flag arr arrName arrLen
		declare -a arr
		
		arrName=$1
		shift # remove the array name from this func's args
		
		# make local copy of caller's array
		eval "arr=( \"\${$arrName[@]}\" )"
		arrLen=${#arr[@]}
		
		while [ $i -lt $arrLen ]
		do
			let j=i+1
			
			opt=${arr[$i]}
			
			if [ "${opt:0:2}" == "--" ]		# handle long opts
			then
			
				flag=${opt#--}
				
				__lib_CmdOpts_handleOption "$flag" "${arr[$j]}"
				
				if ! __lib_CmdOpts_scanOptions_handleReturnValue_ $?
				then
					# illegal option encountered
					arr=$flag
					return 1
				fi
				
			elif [ "${opt:0:1}" == "-" ]	# handle short opts
			then
			
				# handle multiple option flags that are jumbled into one word
				k=1	# +1 to skip '-' prefix
				while [ $k -lt ${#opt} ]
				do
					flag=${opt:$k:1}
					
					__lib_CmdOpts_handleOption "$flag" "${arr[$j]}"
					
					if ! __lib_CmdOpts_scanOptions_handleReturnValue_ $?
					then
						# illegal option encountered
						arr=$flag
						return 1
					fi
					
					let k=k+1
				done
			fi
			
			let i=i+1
		done
	
		# propogate changes in local array to caller's array
		eval "$arrName=( "${arr[@]}" )"
		
#		declare -a ; read < /dev/tty
		return 0
	}
	
	#/**
	# Handles the return value from '__lib_CmdOpts_handleOption()'. This function is meant to be used internally by this library.
	# @param	1	the return value to handle
	# @return	1	an illegal option was encountered
	#*/
	__lib_CmdOpts_scanOptions_handleReturnValue_()
	{
		case $1 in
			2)
				unset -v arr[$j] arr[$i]	# remove the option's name & argument
				
				let j=j+1	# increment argument index
			;;
			
			1)
				unset -v arr[$i]	# remove the option's name
			;;
			
			*)
				return 1	# illegal option
		esac
		
		return 0
	}
	
	#/**
	# Handles the parsing of a command-line option.
	#
	# @param	1	option's name
	# @param	2	option's argument
	#
	# One of the following values must be returned:
	# @return	0	The given option is illegal.
	# @return	1	The given option has no argument.
	# @return	2	The given option has an argument.
	#*/
	__lib_CmdOpts_handleOption() { return 0; }

