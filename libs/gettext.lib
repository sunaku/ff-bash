#!/bin/bash
#
# gettext emulation library.
#
###
#
# Copyright 2003, 2004 Suraj N. Kurapati.
#
###
#
# This file is part of "For each File".
# 
# "For each File" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# "For each File" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with "For each File"; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
###


## globals

	__lib_gettext_tempfile="${TMPDIR:-/tmp}/__lib_gettext.$$"
	
## functions

	# Loads a gettext Portable-Object translation catalog into cache.
	# Cache is not cleared before loading new data.
	#
	# @usage	__lib_gettext_load FILE...
	#
	# @param	FILE	Path of Portable-Object file to load.
	#
	# @return	Standard UNIX exit status.
	#
	# Catalog file Requirements
	# ----------------------------------
	# +	Strings should be properly quoted, using double quotes. 
	#	For example:
	#
	#		msgid "hello world"
	#		msgstr ""
	#
	# +	Multi-line strings are also supported.
	#	For example:
	#
	#		msgstr "This"
	#		  "spans multiple lines"
	#		  "..."
	#
	#	And this:
	#		msgstr "This
	#		  spans multiple lines
	#		  ..."
	#
	# -------------------------------------
	#
	__lib_gettext_load()
	{
		# variables
		local file msgid msgstr exit_status=0
		
		# parse catalog files
		for file
		do
			# check file perms
			if ! [[ -r "$file" && -f "$file" ]]
			then
				exit_status=1
				continue
			fi
			
			# get all strings onto one line
			sed -e '/^$/d ; /^[ \t]*\#/d' "$file" | tr '\n' ' ' | sed -e 's/\([^\\]\)" *\([^\\]\)"/\1 \2/g ; s/msg[si][td]r\?[ \t]*/\n/g' | sed -e '1d ; s/^ *"// ; s/" *$// ; $a\
' > "$__lib_gettext_tempfile"
			
			# load file into cache
			while IFS= read -r msgid && read -r msgstr
			do
				eval "__lib_gettext_cache_$( expr substr "${msgid##[^[:alnum:]]}" 0 1 )${#msgid}=\$msgstr"	# insert entry into hash-table
			done < "$__lib_gettext_tempfile"
			
		done
		
		# clean up
		rm -f "$__lib_gettext_tempfile"
		
		return $exit_status
	}
	
	# Prints a translated string using the loaded catalog data.
	# If a translation is not available, the given query is printed.
	# Escaped sequences such as '\n' are automatically expanded.
	#
	# @see		printf
	#
	# @usage	gettext [OPTION] [QUERY] [ARGUMENT]...
	#
	# @option	-n	Suppress trailing newline.
	#
	# @param	$1	QUERY to translate. This string can have
	#			placeholders which are prefixed with '%' the
	#			percent symbol.
	#
	# @param	...	A variable number of arguments which denote
	#			values for placeholders in both the translated
	#			string and the string to be translated.
	#
	# @return	Standard UNIX exit status.
	#
	gettext()
	{
		local query response newline='\n'
		
		# handle options
		
			if [ "$1" == "-n" ]
			then
				newline=
				shift	# remove $1
			fi
			
			query=$1
			shift	# remove $1 from parameters
		
		# determine translation
		
			eval "response=\$__lib_gettext_cache_$( expr substr "${query##[^[:alnum:]]}" 0 1 )${#query}" # hash-table lookup
			
			# if translation is blank. use untranslated query.
			[ -z "$response" ] && response=$query
		
		# print result
			printf "${response}${newline}" "${@}"
	}
	
	# function alias
	eval_gettext()
	{
		gettext "${@}"
	}
	
	# function alias 
	eval_ngettext()
	{
		ngettext "${@}"
	}
	
	# function alias
	__()
	{
		gettext "${@}"
	}
	
