#!/bin/bash
#
# gettext emulation library.
#
###
#
# Copyright 2003, 2004 Suraj N. Kurapati.
#
###
#
# This file is part of "For each File".
# 
# "For each File" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# "For each File" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with "For each File"; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
###


## globals

	declare -a __lib_gettext_catalogList
	
## functions

	# Loads a gettext translation catalog into the cache. Note that the cache is not cleared before loading new data.
	#
	# @usage	__lib_gettext_load FILE...
	#
	# @param	FILE	Path of translation catalog that you wish to load.
	#
	# @return	Standard UNIX exit status.
	#
	###
	#
	# Catalog file Requirements
	#
	# +	Strings should be properly quoted using double quotes.
	#
	#	For example:
	#
	#		msgid "hello world"
	#		msgstr ""
	#
	# +	Multi-line strings are NOT supported.
	#
	#	For example:
	#
	#		msgstr "This"
	#		  "spans multiple lines"
	#		  "..."
	#
	#	Another example:
	#
	#		msgstr "This
	#		  spans multiple lines
	#		  ..."
	###
	__lib_gettext_load()
	{
		local file exit_status=0
		
		for file
		do
			if [[ -r "$file" && -f "$file" ]]
			then
				__lib_gettext_catalogList[${#__lib_gettext_catalogList[@]}]=$file
			else
				exit_status=1
				continue
			fi
		done
		
		return $exit_status
	}
	
	# Prints the translated value of the given query, by using data from previously loaded catalogs. If a translation is not available, the query is printed instead. Escaped sequences such as '\n' are automatically expanded.
	#
	# @see		printf
	#
	# @usage	gettext [OPTION] QUERY [ARGUMENT]...
	#
	# @option	-n	Suppress trailing newline.
	#
	# @param	$1	QUERY to translate. This string can have
	#			placeholders which are prefixed with '%' the
	#			percent symbol.
	#
	# @param	...	A variable number of arguments which denote
	#			values for placeholders in both the translated
	#			string and the string to be translated.
	#
	# @return	Standard UNIX exit status.
	#
	gettext()
	{
		local query response newline=$'\n'
		
		# handle options
			if [ "$1" == "-n" ]
			then
				newline=
				shift	# remove $1 from parameters
			fi
			
			query=$1
			shift	# remove $1 from parameters
		
		# perform translation
		
			response=$(
				cat "${__lib_gettext_catalogList[@]}" |
				grep -F -A 1 "\"$query\"" |	# assuming PO strings are quoted w/ double quotes
				sed -n '2 s/^[^"]*"\(.*\)" *$/\1/ p'	# assuming response is all on one line
			)
			
			[ -z "$response" ] && response=$query	# use untranslated query if translation failed
		
		printf "${response}${newline}" "${@}"	# print result
		
#		read < /dev/tty
	}
	
	# function alias
	eval_gettext()
	{
		gettext "${@}"
	}
	
	# function alias 
	eval_ngettext()
	{
		ngettext "${@}"
	}
	
	# function alias
	__()
	{
		gettext "${@}"
	}
	
