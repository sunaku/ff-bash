#!/bin/bash
#
# Creates a release package from the current sandbox.
# @param	1	Version of this release
#

# check args
	if [ -z "$1" ]
	then
		echo "usage: ./pack <release_version>"
		exit
	fi

## vars

	# place where files will be uploaded temporarily in order to do translations
	upload_scp_url="cyzsuraj@shell.sourceforge.net:htdocs/tmp/"
	upload_web_url="http://ff-bash.sourceforge.net/tmp/"

	# version of this release
	pack_ver=$1

	# files that use gettext
	pot_in=( ../libs/ff.lib ../docs/manual ../examples/* )
	pot_out=../i18n/catalog.pot

	# files that need to be translated; these are automatically packaged
	doc_in=( ../docs/*.html )

	# other files to be packaged
	pack_in=( ../libs ../docs ../examples ../ff ../fl )

	pack_dir=../_pack/ff-$pack_ver
	pack_dir_docs=$pack_dir/docs

echo "<((pack))>  package-tree setup"

	echo "<((pack))>  removing previously generated files"
		rm -rf $pack_dir ${pack_dir}.* ../i18n/*

	echo "<((pack))>  creating pack dir"
		mkdir -p $pack_dir

	echo "<((pack))>  transferring unprocessable input files into pack dir"
		cp -r "${pack_in[@]}" $pack_dir
		../ff -e '[ "$n" == "svn" ] || [ "${n:0:1}" == . ] && rm -rf "$p"' -ar $pack_dir # remove CVS dirs and hidden files

echo "<((pack))>  gettext translation"

	echo "<((pack))>  creating *.pot files"
		../fl -f ../examples/fl.xgettext "${pot_in[@]}" > $pot_out

	echo "<((pack))>  translating *.pot files"
		../ff -f ff.auto_i18n $pot_out

	echo "<((pack))>  formatting translated *.po files"
		../ff -e '

			for x in ./"${p%.*}"*.po
			do
				export PO_FMT_DATA="$x"
				../fl -f ./fl.po_fmt "$p" > $$

				mv -v $$ "$x"
			done

			rm -f $$
		' $pot_out

	echo "<((pack))>  copying *.po files into pack dir"
		cp -vr ../i18n $pack_dir

echo "<((pack))>  regular HTML translation"

	echo "<((pack))>  preparing input files and their URLs"
		i=0
		while [ $i -lt ${#doc_in[@]} ]
		do
			# vars
				# base name of the input file
				doc_nom[$i]=${doc_in[$i]##*/}

				# web url to temp .html files
				doc_url[$i]="${upload_web_url}${doc_nom[$i]}"

			# put English copy into packd_dir
				cp "${doc_in[$i]}" "$pack_dir_docs/${doc_nom[$i]}"

			# make temp file for translation processing
				cp -v "${doc_in[$i]}" "${doc_nom[$i]}"

			let i=i+1
		done

	echo "<((pack))>  translating temp files"

		echo "<((pack))>  upload HTML files"
		scp "${doc_nom[@]}" "$upload_scp_url"

		echo "<((pack))>  translate HTML files"
		../ff -f ../examples/ff.translate_url "${doc_url[@]}"

	echo "<((pack))>  move translated files to pack dir"

		echo "<((pack))>  make id-anchor URLs local & remove service added HTML header"
			for x in "${doc_nom[@]}"
			do
				../ff -e "sed '1s/^.*$/<html>/ ; s/\(href=\"\)[^>]*#/\1#/g' \$p > $pack_dir_docs/\${n//.html/}.html ; rm -f \$p" ${x}*
			done

		echo "<((pack))>  remove altavista prefix from relative URLs"
			for p in $pack_dir_docs/*html
			do
				sed 's!http://babelfish.altavista.com/babelfish/trurl_pagecontent?lp=.._..&url=http%3a%2f%2fff-bash.sourceforge.net%2ftmp%2f!!g' < "$p" > /tmp/$$ && mv -vf /tmp/$$ "$p"
			done

	echo "<((pack))>  removing old release info from changes*.html files"

		mv $pack_dir_docs/changes*html .

		for p in changes*html
		do
			sed '/<!-- old-version/,/<!-- old-version/ d' "$p" > "$pack_dir_docs/$p"
		done

echo "<((pack))>  package creation"

	while read -p "Now, make any last minute changes before creating packs... (press EOT to continue)" ; do :; done

	echo "<((pack))>  setting file permissions"
		chmod -R u=rwx,g=rx,o=rx "$pack_dir"
		find "$pack_dir" -type f -print | xargs chmod -x
		chmod +x "$pack_dir"/f*	# make the tools executable

	echo "<((pack))>  creating packages"
		pushd "$pack_dir"/..
			tar -jcf ${pack_dir}.tar.bz2 ${pack_dir##*/}
			tar -zcf ${pack_dir}.tar.gz ${pack_dir##*/}
			zip -r ${pack_dir}.zip ${pack_dir##*/}
		popd

